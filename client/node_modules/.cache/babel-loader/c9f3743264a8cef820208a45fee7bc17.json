{"ast":null,"code":"var _jsxFileName = \"/home/hp/Documents/crwn-clothing/src/pages/shop/shop.component.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route } from \"react-router-dom\";\nimport { createStructuredSelector } from \"reselect\";\nimport CollectionOverview from \"../../components/collection-overview/collection-overview.component\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\"; // import {\n//   convertCollectionSnapshotToMap,\n//   firestore,\n// } from \"../../firebase/firebase.utils\";\n\nimport { fetchCollectionStartAsync } from \"../../redux/shop/shop.actions\";\nimport { selectIsCollectionFetching, selectCollectionsLoaded } from \"../../redux/shop/shop.selector\";\nimport CollectionPage from \"../collection/collection.component\";\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  // state = {\n  //   loading: true,\n  // };\n  // unsubscribeFromSnapshot = null;\n  componentDidMount() {\n    const {\n      fetchCollectionStartAsync\n    } = this.props;\n    fetchCollectionStartAsync(); // const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection(\"collections\");\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n    //   async (snapshot) => {\n    //     const collectionMap = convertCollectionSnapshotToMap(snapshot);\n    //     updateCollections(collectionMap);\n    //     this.setState({ loading: false });\n    //   }\n    // );\n    // collectionRef.get().then((snapshot) => {\n    //   const collectionMap = convertCollectionSnapshotToMap(snapshot);\n    //   updateCollections(collectionMap);\n    //   this.setState({ loading: false });\n    // });\n    // fetch(\n    //   \"https://firestore.googleapis.com/v1/projects/crwn-db-1c904/databases/(default)/documents/collections\"\n    // )\n    //   .then((response) => response.json())\n    //   .then((collections) => console.log(collections));\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionFetching,\n      isCollectionLoaded\n    } = this.props; // const { loading } = this.state;\n\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => React.createElement(CollectionOverviewWithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(Route // exact\n    , {\n      path: `${match.path}/:collectionId`,\n      render: props => React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: !isCollectionLoaded\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionLoaded: selectCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  // updateCollections: (collectionMap) =>\n  //   dispatch(updateCollections(collectionMap)),\n  fetchCollectionStartAsync: () => dispatch(fetchCollectionStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/home/hp/Documents/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","connect","Route","createStructuredSelector","CollectionOverview","WithSpinner","fetchCollectionStartAsync","selectIsCollectionFetching","selectCollectionsLoaded","CollectionPage","CollectionOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","props","render","match","isCollectionFetching","isCollectionLoaded","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,OAAOC,kBAAP,MAA+B,oEAA/B;AACA,OAAOC,WAAP,MAAwB,sDAAxB,C,CACA;AACA;AACA;AACA;;AACA,SAASC,yBAAT,QAA0C,+BAA1C;AACA,SACEC,0BADF,EAEEC,uBAFF,QAGO,gCAHP;AAIA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,MAAMC,6BAA6B,GAAGL,WAAW,CAACD,kBAAD,CAAjD;AACA,MAAMO,yBAAyB,GAAGN,WAAW,CAACI,cAAD,CAA7C;;AAEA,MAAMG,QAAN,SAAuBZ,KAAK,CAACa,SAA7B,CAAuC;AACrC;AACA;AACA;AAEA;AAEAC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAER,MAAAA;AAAF,QAAgC,KAAKS,KAA3C;AACAT,IAAAA,yBAAyB,GAFP,CAIlB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACD;;AAEDU,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,oBAAT;AAA+BC,MAAAA;AAA/B,QAAsD,KAAKJ,KAAjE,CADO,CAEP;;AACA,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACG,IAAK,EAFtB;AAGE,MAAA,MAAM,EAAGL,KAAD,IACN,oBAAC,6BAAD;AACE,QAAA,SAAS,EAAEG;AADb,SAEMH,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAWE,oBAAC,KAAD,CACE;AADF;AAEE,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACG,IAAK,gBAFtB;AAGE,MAAA,MAAM,EAAGL,KAAD,IACN,oBAAC,yBAAD;AACE,QAAA,SAAS,EAAE,CAACI;AADd,SAEMJ,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADF;AAwBD;;AA9DoC;;AAiEvC,MAAMM,eAAe,GAAGlB,wBAAwB,CAAC;AAC/Ce,EAAAA,oBAAoB,EAAEX,0BADyB;AAE/CY,EAAAA,kBAAkB,EAAEX;AAF2B,CAAD,CAAhD;;AAKA,MAAMc,kBAAkB,GAAIC,QAAD,KAAe;AACxC;AACA;AACAjB,EAAAA,yBAAyB,EAAE,MAAMiB,QAAQ,CAACjB,yBAAyB,EAA1B;AAHD,CAAf,CAA3B;;AAMA,eAAeL,OAAO,CAACoB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CV,QAA7C,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route } from \"react-router-dom\";\nimport { createStructuredSelector } from \"reselect\";\nimport CollectionOverview from \"../../components/collection-overview/collection-overview.component\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\n// import {\n//   convertCollectionSnapshotToMap,\n//   firestore,\n// } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionStartAsync } from \"../../redux/shop/shop.actions\";\nimport {\n  selectIsCollectionFetching,\n  selectCollectionsLoaded,\n} from \"../../redux/shop/shop.selector\";\nimport CollectionPage from \"../collection/collection.component\";\n\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  // state = {\n  //   loading: true,\n  // };\n\n  // unsubscribeFromSnapshot = null;\n\n  componentDidMount() {\n    const { fetchCollectionStartAsync } = this.props;\n    fetchCollectionStartAsync();\n\n    // const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection(\"collections\");\n\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n    //   async (snapshot) => {\n    //     const collectionMap = convertCollectionSnapshotToMap(snapshot);\n    //     updateCollections(collectionMap);\n    //     this.setState({ loading: false });\n    //   }\n    // );\n\n    // collectionRef.get().then((snapshot) => {\n    //   const collectionMap = convertCollectionSnapshotToMap(snapshot);\n    //   updateCollections(collectionMap);\n    //   this.setState({ loading: false });\n    // });\n\n    // fetch(\n    //   \"https://firestore.googleapis.com/v1/projects/crwn-db-1c904/databases/(default)/documents/collections\"\n    // )\n    //   .then((response) => response.json())\n    //   .then((collections) => console.log(collections));\n  }\n\n  render() {\n    const { match, isCollectionFetching, isCollectionLoaded } = this.props;\n    // const { loading } = this.state;\n    return (\n      <div className=\"shop-page\">\n        <Route\n          exact\n          path={`${match.path}`}\n          render={(props) => (\n            <CollectionOverviewWithSpinner\n              isLoading={isCollectionFetching}\n              {...props}\n            />\n          )}\n        />\n        <Route\n          // exact\n          path={`${match.path}/:collectionId`}\n          render={(props) => (\n            <CollectionPageWithSpinner\n              isLoading={!isCollectionLoaded}\n              {...props}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionLoaded: selectCollectionsLoaded,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  // updateCollections: (collectionMap) =>\n  //   dispatch(updateCollections(collectionMap)),\n  fetchCollectionStartAsync: () => dispatch(fetchCollectionStartAsync()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}