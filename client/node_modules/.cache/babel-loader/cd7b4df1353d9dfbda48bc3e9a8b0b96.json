{"ast":null,"code":"var _jsxFileName = \"/home/hp/Documents/crwn-clothing/src/pages/shop/shop.component.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route } from \"react-router-dom\";\nimport CollectionOverview from \"../../components/collection-overview/collection-overview.component\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport { convertCollectionSnapshotToMap, firestore } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionStartAsync } from \"../../redux/shop/shop.actions\";\nimport CollectionPage from \"../collection/collection.component\";\nimport { createStructuredSelector } from \"reselect\";\nimport { selectIsCollectionFetching } from \"../../redux/shop/shop.selector\";\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = firestore.collection(\"collections\"); // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n    //   async (snapshot) => {\n    //     const collectionMap = convertCollectionSnapshotToMap(snapshot);\n    //     updateCollections(collectionMap);\n    //     this.setState({ loading: false });\n    //   }\n    // );\n\n    collectionRef.get().then(snapshot => {\n      const collectionMap = convertCollectionSnapshotToMap(snapshot);\n      updateCollections(collectionMap);\n      this.setState({\n        loading: false\n      });\n    }); // fetch(\n    //   \"https://firestore.googleapis.com/v1/projects/crwn-db-1c904/databases/(default)/documents/collections\"\n    // )\n    //   .then((response) => response.json())\n    //   .then((collections) => console.log(collections));\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => React.createElement(CollectionOverviewWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(Route // exact\n    , {\n      path: `${match.path}/:collectionId`,\n      render: props => React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  // updateCollections: (collectionMap) =>\n  //   dispatch(updateCollections(collectionMap)),\n  fetchCollectionStartAsync: () => dispatch(fetchCollectionStartAsync())\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/home/hp/Documents/crwn-clothing/src/pages/shop/shop.component.jsx"],"names":["React","connect","Route","CollectionOverview","WithSpinner","convertCollectionSnapshotToMap","firestore","fetchCollectionStartAsync","CollectionPage","createStructuredSelector","selectIsCollectionFetching","CollectionOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","state","loading","unsubscribeFromSnapshot","componentDidMount","updateCollections","props","collectionRef","collection","get","then","snapshot","collectionMap","setState","render","match","path","mapStateToProps","isCollectionFetching","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,kBAAP,MAA+B,oEAA/B;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AACA,SACEC,8BADF,EAEEC,SAFF,QAGO,+BAHP;AAIA,SAASC,yBAAT,QAA0C,+BAA1C;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AAEA,MAAMC,6BAA6B,GAAGP,WAAW,CAACD,kBAAD,CAAjD;AACA,MAAMS,yBAAyB,GAAGR,WAAW,CAACI,cAAD,CAA7C;;AAEA,MAAMK,QAAN,SAAuBb,KAAK,CAACc,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACrCC,KADqC,GAC7B;AACNC,MAAAA,OAAO,EAAE;AADH,KAD6B;AAAA,SAKrCC,uBALqC,GAKX,IALW;AAAA;;AAOrCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAwB,KAAKC,KAAnC;AACA,UAAMC,aAAa,GAAGf,SAAS,CAACgB,UAAV,CAAqB,aAArB,CAAtB,CAFkB,CAIlB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAA0BC,QAAD,IAAc;AACrC,YAAMC,aAAa,GAAGrB,8BAA8B,CAACoB,QAAD,CAApD;AACAN,MAAAA,iBAAiB,CAACO,aAAD,CAAjB;AACA,WAAKC,QAAL,CAAc;AAAEX,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KAJD,EAZkB,CAkBlB;AACA;AACA;AACA;AACA;AACD;;AAEDY,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKT,KAAvB;AACA,UAAM;AAAEJ,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACA,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAG,GAAEc,KAAK,CAACC,IAAK,EAFtB;AAGE,MAAA,MAAM,EAAGV,KAAD,IACN,oBAAC,6BAAD;AAA+B,QAAA,SAAS,EAAEJ;AAA1C,SAAuDI,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQE,oBAAC,KAAD,CACE;AADF;AAEE,MAAA,IAAI,EAAG,GAAES,KAAK,CAACC,IAAK,gBAFtB;AAGE,MAAA,MAAM,EAAGV,KAAD,IACN,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEJ;AAAtC,SAAmDI,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CADF;AAkBD;;AArDoC;;AAwDvC,MAAMW,eAAe,GAAGtB,wBAAwB,CAAC;AAC/CuB,EAAAA,oBAAoB,EAAEtB;AADyB,CAAD,CAAhD;;AAIA,MAAMuB,kBAAkB,GAAIC,QAAD,KAAe;AACxC;AACA;AACA3B,EAAAA,yBAAyB,EAAE,MAAM2B,QAAQ,CAAC3B,yBAAyB,EAA1B;AAHD,CAAf,CAA3B;;AAMA,eAAeN,OAAO,CAAC,IAAD,EAAOgC,kBAAP,CAAP,CAAkCpB,QAAlC,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Route } from \"react-router-dom\";\nimport CollectionOverview from \"../../components/collection-overview/collection-overview.component\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport {\n  convertCollectionSnapshotToMap,\n  firestore,\n} from \"../../firebase/firebase.utils\";\nimport { fetchCollectionStartAsync } from \"../../redux/shop/shop.actions\";\nimport CollectionPage from \"../collection/collection.component\";\nimport { createStructuredSelector } from \"reselect\";\nimport { selectIsCollectionFetching } from \"../../redux/shop/shop.selector\";\n\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  state = {\n    loading: true,\n  };\n\n  unsubscribeFromSnapshot = null;\n\n  componentDidMount() {\n    const { updateCollections } = this.props;\n    const collectionRef = firestore.collection(\"collections\");\n\n    // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(\n    //   async (snapshot) => {\n    //     const collectionMap = convertCollectionSnapshotToMap(snapshot);\n    //     updateCollections(collectionMap);\n    //     this.setState({ loading: false });\n    //   }\n    // );\n\n    collectionRef.get().then((snapshot) => {\n      const collectionMap = convertCollectionSnapshotToMap(snapshot);\n      updateCollections(collectionMap);\n      this.setState({ loading: false });\n    });\n\n    // fetch(\n    //   \"https://firestore.googleapis.com/v1/projects/crwn-db-1c904/databases/(default)/documents/collections\"\n    // )\n    //   .then((response) => response.json())\n    //   .then((collections) => console.log(collections));\n  }\n\n  render() {\n    const { match } = this.props;\n    const { loading } = this.state;\n    return (\n      <div className=\"shop-page\">\n        <Route\n          exact\n          path={`${match.path}`}\n          render={(props) => (\n            <CollectionOverviewWithSpinner isLoading={loading} {...props} />\n          )}\n        />\n        <Route\n          // exact\n          path={`${match.path}/:collectionId`}\n          render={(props) => (\n            <CollectionPageWithSpinner isLoading={loading} {...props} />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  // updateCollections: (collectionMap) =>\n  //   dispatch(updateCollections(collectionMap)),\n  fetchCollectionStartAsync: () => dispatch(fetchCollectionStartAsync()),\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}